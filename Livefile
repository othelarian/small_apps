# REQUIRES ############################

require! {
  bach
  'fs-extra': fse
  './core/builder': builder
  './core/tasker': tasker
}

# OPTIONS #############################

option \cmd,     \c, \String,  'command to use (with the `cmd` task)'
option \github,  \g, \Boolean, ''
option \id,      \p, \Int,     'project id'
option \list,    \l, \Boolean, 'list all command of a project'
option \release, \r, \Boolean, ''
option \watch,   \w, \Boolean, '(only for dev mode)'

# GLOBAL ##############################

global.cfg = {}

# FUNCTIONS ###########################

build-all = !->
  end-all = (cb) !->
    cfg.id = 0
    cb void 5
  start-all = (cb) !->
    cfg.dir = '.'
    cfg.out = "./#{cfg.dest}"
    cfg.src = cfg.root
    cb void 4
  cfg.list = cfg.list.filter (.active), cfg.list
  args =
    [builder.building pcfg for pcfg in cfg.list].flat!
    |> ([start-all, builder.create-dir, builder.compile-src, end-all] ++)
  (bach.series args) builder.final-cb

check-env = (opts) !->
  require! { './core/config': config }
  cfg <<<< config.cfg
  [cfg.dest, cfg.release, cfg.github] = switch
    | opts.github  => [cfg.dest_path.github,  yes, yes]
    | opts.release => [cfg.dest_path.release, yes, no]
    | _            => [cfg.dest_path.debug,   no,  no]

# TEST ################################

task \wasm, '', !->
  #
  builder.wasm-pack builder.final-cb
  #

# TASKS ###############################

task \all, 'compile all active projects', (opts) !->
  check-env opts
  build-all!

task \clean, 'remove `dist`', (opts) !->
  check-env opts
  tasker.clean!

task \cmd, 'execute a command in a project', (opts) !->
  opts.github = no
  opts.release = no
  check-env opts
  tasker.command!

task \compile, 'compile one project (USE PROJECT ID!)', (opts) !->
  opts.github = no
  opts.release = no
  check-env opts
  tasker.compile opts

task \create, 'create a new project', (opts) !->
  check-env opts
  tasker.create!

task \list, 'list all projects actually available', (_) !->
  check-env {}
  tasker.list!

task \serve, 'launch the server to get access to the projects', (opts) !->
  opts.github = no
  opts.release = no
  check-env opts
  #build-all!
  require! { './core/server': { serve } }
  serve!
